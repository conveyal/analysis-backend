package com.conveyal.r5.api.util;

import com.conveyal.r5.common.DirectionUtils;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.io.ParseException;
import org.locationtech.jts.io.WKTReader;

import java.util.Arrays;
import java.util.Collection;

/**
 * Created by mabu on 1.6.2016.
 */
@RunWith(Parameterized.class)
public class AnglesTest {

    private final double delta = 0.01;

    private double angle;
    private LineString lineString;
    private LineString reverseLine;
    private static WKTReader wktReader;

    @Parameterized.Parameters(name="angle {0}")
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][] {
            //Cheap ruler:
           /* { -179 ," LINESTRING(15.6455 46.557611,15.645318121064939 46.550415296467214,15.645272651331172 46.54861637058402) "},
            //{ -180 ," LINESTRING(15.6455 46.557611,15.6455 46.550414200359775,15.6455 46.548615000449715) "},
            { -165 ," LINESTRING(15.6455 46.557611,15.642802736876652 46.55065942536088,15.642128421095816 46.5489215317011) "},
            { -150 ," LINESTRING(15.6455 46.557611,15.640289287777723 46.55137838868561,15.638986609722153 46.54982023585702) "},
            { -135 ," LINESTRING(15.6455 46.557611,15.638130940105631 46.55252209417156,15.63628867513204 46.551249867714446) "},
            { -120 ," LINESTRING(15.6455 46.557611,15.636474781687395 46.55401260017989,15.634218477109243 46.55311300022486) "},
            { -105 ," LINESTRING(15.6455 46.557611,15.635433676982284 46.55574833118932,15.632917096227855 46.55528266398665) "},
            { -90 ," LINESTRING(15.6455 46.557611,15.635078575555445 46.557611,15.632473219444305 46.557611) "},
            { -75 ," LINESTRING(15.6455 46.557611,15.635433676982284 46.55947366881068,15.632917096227855 46.55993933601335) "},
            { -60 ," LINESTRING(15.6455 46.557611,15.636474781687395 46.561209399820115,15.634218477109243 46.56210899977514) "},
            { -45 ," LINESTRING(15.6455 46.557611,15.638130940105631 46.562699905828445,15.63628867513204 46.563972132285556) "},
            { -30 ," LINESTRING(15.6455 46.557611,15.640289287777723 46.56384361131439,15.638986609722153 46.56540176414298) "},
            { -15 ," LINESTRING(15.6455 46.557611,15.642802736876652 46.564562574639126,15.642128421095816 46.566300468298905) "},
            { 0 ," LINESTRING(15.6455 46.557611,15.6455 46.56480779964023,15.6455 46.56660699955029) "},
            { 15 ," LINESTRING(15.6455 46.557611,15.648197263123349 46.564562574639126,15.648871578904185 46.566300468298905) "},
            { 30 ," LINESTRING(15.6455 46.557611,15.650710712222278 46.56384361131439,15.652013390277848 46.56540176414298) "},
            { 45 ," LINESTRING(15.6455 46.557611,15.65286905989437 46.562699905828445,15.65471132486796 46.563972132285556) "},
            { 60 ," LINESTRING(15.6455 46.557611,15.654525218312605 46.561209399820115,15.656781522890757 46.56210899977514) "},
            { 75 ," LINESTRING(15.6455 46.557611,15.655566323017716 46.55947366881068,15.658082903772145 46.55993933601335) "},
            { 90 ," LINESTRING(15.6455 46.557611,15.655921424444555 46.557611,15.658526780555695 46.557611) "},
            { 105 ," LINESTRING(15.6455 46.557611,15.655566323017716 46.55574833118932,15.658082903772145 46.55528266398665) "},
            { 120 ," LINESTRING(15.6455 46.557611,15.654525218312605 46.55401260017989,15.656781522890757 46.55311300022486) "},
            { 135 ," LINESTRING(15.6455 46.557611,15.65286905989437 46.55252209417156,15.65471132486796 46.551249867714446) "},
            { 150 ," LINESTRING(15.6455 46.557611,15.650710712222278 46.55137838868561,15.652013390277848 46.54982023585702) "},
            { 165 ," LINESTRING(15.6455 46.557611,15.648197263123349 46.55065942536088,15.648871578904185 46.5489215317011) "},
            { 180 ," LINESTRING(15.6455 46.557611,15.6455 46.550414200359775,15.6455 46.548615000449715) "}, */
            //Turf:

            { -179 ," LINESTRING(15.6455 46.557611,15.645317478134713 46.55041978026114,15.645271855225554 46.54862197528108) "},
            //{ -180 ," LINESTRING(15.6455 46.557611,15.645500000000002 46.550418684981885,15.645500000000002 46.54862060622736) "},
            { -165 ," LINESTRING(15.6455 46.557611,15.642793190059745 46.55066372524829,15.642116595847229 46.54892689658591) "},
            { -150 ," LINESTRING(15.6455 46.557611,15.640270775520289 46.55138215333488,15.638963656945254 46.549824904441955) "},
            { -135 ," LINESTRING(15.6455 46.557611,15.638104604080235 46.55252502697691,15.636255971680814 46.55125345926329) "},
            { -120 ," LINESTRING(15.6455 46.557611,15.636442278176375 46.55401448502616,15.634178035314534 46.55311524458698) "},
            { -105 ," LINESTRING(15.6455 46.557611,15.635397101100212 46.55574904718423,15.632871484715526 46.55528342001593) "},
            { -90 ," LINESTRING(15.6455 46.557611,15.635040350609943 46.557610523339264,15.632425438305495 46.5576102552176) "},
            { -75 ," LINESTRING(15.6455 46.557611,15.6353964079014 46.55947206335472,15.632870401592394 46.55993719020118) "},
            { -60 ," LINESTRING(15.6455 46.557611,15.6364410775208 46.56120679998273,15.63417615929021 46.56210563823941) "},
            { -45 ," LINESTRING(15.6455 46.557611,15.638103217682579 46.56269649636235,15.636253805434473 46.5639677959543) "},
            { -30 ," LINESTRING(15.6455 46.557611,15.640269574864686 46.56383960833476,15.638961780920855 46.565396723166835) "},
            { -15 ," LINESTRING(15.6455 46.557611,15.642792496860903 46.56455821089129,15.642115512724018 46.56629500363218) "},
            { 0 ," LINESTRING(15.6455 46.557611,15.645500000000002 46.564803315018125,15.645500000000002 46.56660139377266) "},
            { 15 ," LINESTRING(15.6455 46.557611,15.648207503139101 46.56455821089129,15.648884487275986 46.56629500363218) "},
            { 30 ," LINESTRING(15.6455 46.557611,15.650730425135318 46.56383960833476,15.652038219079149 46.565396723166835) "},
            { 45 ," LINESTRING(15.6455 46.557611,15.652896782317425 46.56269649636235,15.654746194565531 46.5639677959543) "},
            { 60 ," LINESTRING(15.6455 46.557611,15.654558922479204 46.56120679998273,15.656823840709794 46.56210563823941) "},
            { 75 ," LINESTRING(15.6455 46.557611,15.655603592098604 46.55947206335472,15.65812959840761 46.55993719020118) "},
            { 90 ," LINESTRING(15.6455 46.557611,15.655959649390061 46.557610523339264,15.65857456169451 46.5576102552176) "},
            { 105 ," LINESTRING(15.6455 46.557611,15.655602898899792 46.55574904718423,15.658128515284478 46.55528342001593) "},
            { 120 ," LINESTRING(15.6455 46.557611,15.654557721823629 46.55401448502616,15.656821964685472 46.55311524458698) "},
            { 135 ," LINESTRING(15.6455 46.557611,15.652895395919769 46.55252502697691,15.65474402831919 46.55125345926329) "},
            { 150 ," LINESTRING(15.6455 46.557611,15.650729224479715 46.55138215333488,15.65203634305475 46.549824904441955) "},
            { 165 ," LINESTRING(15.6455 46.557611,15.648206809940259 46.55066372524829,15.648883404152777 46.54892689658591) "},
            { 180 ," LINESTRING(15.6455 46.557611,15.645500000000002 46.550418684981885,15.645500000000002 46.54862060622736) "},
        });
    }

    @BeforeClass
    public static void setUpClass() throws Exception {
        wktReader = new WKTReader();
    }

    public AnglesTest(int angle, String wktlineString) throws ParseException {
        this.angle = angle;
        this.lineString = (LineString) wktReader.read(wktlineString);
        this.reverseLine = (LineString) this.lineString.reverse();
    }

    @Test
    public void testFirstAngle() throws Exception {
        Assert.assertEquals(angle, Math.toDegrees(DirectionUtils.getFirstAngle(lineString)), delta);
        //Assert.assertEquals(angle, 180+DirectionUtils.getLastAngle(reverseLine), delta);


    }

    @Test
    public void testLastAngle() throws Exception {
        Assert.assertEquals(angle, Math.toDegrees(DirectionUtils.getLastAngle(lineString)), delta);

    }

}
